package com.example.demo.file;

import java.io.FileInputStream;
import java.net.URLEncoder;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;
import org.springframework.http.ResponseEntity;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import lombok.AllArgsConstructor;

@RestController
@AllArgsConstructor
public class FileController {

	FileService fileService;
	
	@PostMapping("/file-upload")
	public Map<String, Object> FileUpload(
			@RequestParam("article_file") List<MultipartFile> multipartFile,
			HttpServletRequest request) {
		System.out.println("multipartFile:" + multipartFile);
		System.out.println("request:" + request);
		return fileService.uploadFile(request, multipartFile);
		
	}
	
	@GetMapping("/file-download/{fileId}")
//	public ResponseEntity<Resource> downloadFile(HttpServletResponse res, @PathVariable String fileId) throws Exception{
	public ResponseEntity<InputStreamResource> downloadFile(HttpServletResponse res, @PathVariable String fileId) throws Exception{	
//		//파일 조회
//		FileDTO fileDto = fileService.selectFile(fileId);
//		
//		//파일 경로
//		Path saveFilePath = Paths.get(fileDto.getLogiPath() + fileDto.getLogiNm());
//		
//		System.out.println("saveFilePath: "+ saveFilePath);
//		
//		//해당경로에 파일이 없으면
//		if(!saveFilePath.toFile().exists()) {
//			throw new RuntimeException("file not found");
//		}
//		
//		res.setHeader("Content-Disposition", "attachment; filename=\""+ URLEncoder.encode((String)fileDto.getOrigNm(),"UTF-8")+"\";");
//		res.setHeader("Content-Transfer-Encoding", "binary");
//		res.setHeader("Content-Type", "application/download; utf-8");			
//		res.setHeader("Pragma", "no-cahe;");
//		res.setHeader("Expires", "-1");
//		FileInputStream fis = null;
//		
//		try {
//			fis= new FileInputStream(saveFilePath.toFile());
//			FileCopyUtils.copy(fis,res.getOutputStream());
//			res.getOutputStream().flush();
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//			throw new RuntimeException(e);
//		} finally {
//			try {
//				fis.close();
//			}
//			catch (Exception e) {
//				e.printStackTrace();
//			}
//		}
		
		
		
		
		System.out.println("fName = " + fName);
		// 파일 경로 
		String path = file_Path + File.separator + fName;
		// 파일 존재 유무 
		boolean fExist = _FileUtil.fileExistInfo(path);
		if(fExist) {
	        File file = new File(path);
	        String fileName = file.getName();
	        // 파일 확장자 
	        String ext = fileName.substring(fileName.lastIndexOf(".") + 1);
	        HttpHeaders header = new HttpHeaders();
	        Path fPath = Paths.get(file.getAbsolutePath());
	        
	        header.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename="+fileName);
	        header.add("Cache-Control", "no-cache, no-store, must-revalidate");
	        header.add("Pragma", "no-cache");
	        header.add("Expires", "0");
	        
	        // 대용량일 경우 resource3을 사용해야함 
//	        ByteArrayResource resource = new ByteArrayResource(Files.readAllBytes(fPath ));
//	        Resource resouce2 = resourceLoader.getResource(path); 
	        InputStreamResource resource3 = new InputStreamResource(new FileInputStream(file));
	        
	        return ResponseEntity.ok()
	                .headers(header)
	                .contentLength(file.length())
	                .contentType(MediaType.parseMediaType("application/octet-stream"))
	                .body(resource3);
		}
		return null;
		
				
	}
}
