package com.example.demo.file;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.IOUtils;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.util.UriUtils;

import com.example.demo.resources.MediaUtils;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@RestController
@AllArgsConstructor
@Slf4j
public class FileController {

	FileService fileService;
	
	@PostMapping("/file-upload")
	public Map<String, Object> FileUpload(
			@RequestParam("article_file") List<MultipartFile> multipartFile,
			HttpServletRequest request) {
		System.out.println("multipartFile:" + multipartFile);
		System.out.println("request:" + request);
		return fileService.uploadFile(request, multipartFile);
		
	}
	
	@GetMapping("/file-download/{fileId}")
	public ResponseEntity<Resource> downloadFile(HttpServletResponse res, @PathVariable String fileId) throws Exception{

		//파일 조회
		FileDTO fileDto = fileService.selectFile(fileId);
		
		//파일 경로
		Path saveFilePath = Paths.get(fileDto.getLogiPath() + fileDto.getLogiNm());

		//System.out.println("saveFilePath:"+ saveFilePath);
		
        UrlResource resource = new UrlResource("file:" + saveFilePath);

        String encodedFileName = UriUtils.encode(fileDto.getOrigNm(), StandardCharsets.UTF_8);

        String contentType = "application/download; utf-8";
        
        // 파일 다운로드 대화상자가 뜨도록 하는 헤더를 설정해주는 것
        // Content-Disposition 헤더에 attachment; filename="업로드 파일명" 값을 준다.
        //String contentDisposition = "attachment; filename=\"" + encodedFileName + "\"";

        HttpHeaders headers = new HttpHeaders();
                
        headers.add("Content-Disposition", "attachment; filename=\""+ URLEncoder.encode(encodedFileName,"UTF-8")+"\";");
        headers.add("Content-Transfer-Encoding", "binary");
        headers.add("Content-Type", contentType);			
        headers.add("Pragma", "no-cahe;");
        headers.add("Expires", "-1");
        headers.add("Access-Control-Expose-Headers", "Content-Disposition");
        
        return ResponseEntity.ok().headers(headers).body(resource);
		
	}
	
	// feed image 반환하기
	@GetMapping(value = "image/{imagename}", produces = MediaType.IMAGE_JPEG_VALUE)
	public ResponseEntity<byte[]> userSearch(@PathVariable("imagename") String imagename) throws IOException {
		InputStream imageStream = new FileInputStream("C://images/feed/" + imagename);
		byte[] imageByteArray = IOUtils.toByteArray(imageStream);
		imageStream.close();
		return new ResponseEntity<byte[]>(imageByteArray, HttpStatus.OK);
	}
	
	@GetMapping("/getImage/{fileId}")
	public ResponseEntity<Resource> displayFiles(@PathVariable String fileId) throws FileNotFoundException {
		
		FileDTO fileDTO = fileService.selectFile(fileId);
		InputStream imageStream = new FileInputStream(fileDTO.getLogiPath() + fileDTO.getThumbnailNm());
		
		
		
//		Resource file = null;
//		 HttpHeaders headers = new HttpHeaders();
//		 
//		try {
//			System.out.println("fileId: "+ fileId);
//		    file = fileService.loadFileAsResource(fileId);
//		    		   
//		    headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + file.getFilename() + "\"");
//		    headers.add(HttpHeaders.CONTENT_TYPE, MediaType.IMAGE_JPEG_VALUE);
//		   
//		    log.info("headers: {}",headers);
//		    
//		} catch(Exception e) {
//			log.info("err: {} ",e);
//		}
//		
//		 return ResponseEntity.ok().headers(headers).body(file);
	}
		
	@GetMapping("/imageview/{fileIds}")
	public ResponseEntity<byte[]> displayFile(@PathVariable("fileIds") String fileIds) throws Exception{
		
		System.out.println("fileIds: " +fileIds);
		
		FileDTO filedto =  fileService.selectFile(fileIds);
		
		System.out.println("filedto: " +filedto);
				
		InputStream in = null;
		ResponseEntity<byte[]> entity = null;
		try {
		
			String formatName = fileIds.substring(fileIds.lastIndexOf(".")+1);
			MediaType mType = MediaUtils.getMediaType(formatName);
			HttpHeaders headers = new HttpHeaders();
			in = new FileInputStream(filedto.getLogiPath() + filedto.getThumbnailNm());
			
			if(mType != null) {
				headers.setContentType(mType);
			}else {
				fileIds = fileIds.substring(fileIds.indexOf("_")+1);
				headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
				headers.add("Content-Disposition", "attachment; filename=\""+ new String(fileIds.getBytes("UTF-8"),"ISO-8859-1"));
			}
			
			entity = new ResponseEntity<byte[]>(IOUtils.toByteArray(in), headers, HttpStatus.CREATED);
						
		} catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<byte[]>(HttpStatus.BAD_REQUEST);
		}
		
		return entity;
				
	}
	
	
//	@GetMapping("/imageview/{fileIds}")
//	public ResponseEntity<List<byte[]>> imageview(@PathVariable("fileIds") List<String> fileIds) throws IOException {
//	//public void imageview(@PathVariable("fileIds") List<String> fileids) throws IOException {
//		
//		
//		
//		 List<byte[]> images = new ArrayList<>();
//		
//		for(String fileId : fileIds) {			
//			
//			FileDTO fileDTO = fileService.selectFile(fileId);
//			
//			System.out.println("fileDTO: "+fileDTO);
//			
//			InputStream imageStream = new FileInputStream(fileDTO.getLogiPath() + fileDTO.getThumbnailNm());
//			
//			byte[] imageByteArray = IOUtils.toByteArray(imageStream);
//			imageStream.close();	
//			
//			images.add(imageByteArray);
//			
//		}
//		
//		return new ResponseEntity<>(images, HttpStatus.OK);
//	}
}
